/**
 * @module
 *
 * Provides the module meta data for internal modules.
 *
 * DO NOT EDIT: AUTO-GENERATED FILE
 * @see `support/scripts/src/playground.ts`
 *
 */

import { loadJson } from 'json.macro';

// Use a babel macro to load the json file.
const packageNames = loadJson<string[]>('./dts.json', 'packageNames');

/**
 * The packages which have types already provided for them.
 */
export const DTS_MODULE_NAMES: Set<string> = new Set(packageNames);

/**
 * The names and exports of the internally created modules.
 */
export const INTERNAL_MODULE_META: Array<{ moduleName: string; exports: string[] }> = [
  {
    moduleName: '@remirror/core',
    exports: [
      'AttributesExtension',
      'CommandsExtension',
      'DEFAULT_SHORTCUTS',
      'DecorationsExtension',
      'DelayedCommand',
      'Framework',
      'GOOGLE_DOC_SHORTCUTS',
      'HelpersExtension',
      'InputRulesExtension',
      'KeymapExtension',
      'MarkExtension',
      'MetaExtension',
      'NodeExtension',
      'NodeViewsExtension',
      'PasteRulesExtension',
      'PlainExtension',
      'PluginsExtension',
      'RemirrorManager',
      'SchemaExtension',
      'SuggestExtension',
      'TagsExtension',
      'builtinPreset',
      'command',
      'delayedCommand',
      'extension',
      'extensionDecorator',
      'helper',
      'insertText',
      'isDelayedValue',
      'isExtension',
      'isExtensionConstructor',
      'isExtensionTag',
      'isMarkExtension',
      'isNodeExtension',
      'isPlainExtension',
      'isRemirrorManager',
      'keyBinding',
      'keyboardShortcuts',
      'mutateDefaultExtensionOptions',
      'toggleMark',
      'RemirrorIdentifier',
      'ExtensionPriority',
      'ManagerPhase',
      'NamedShortcut',
      'ErrorConstant',
      'EMPTY_ARRAY',
      'EMPTY_NODE',
      'EMPTY_PARAGRAPH_NODE',
      'ExtensionTag',
      'LEAF_NODE_REPLACING_CHARACTER',
      'NON_BREAKING_SPACE_CHAR',
      'NULL_CHARACTER',
      'REMIRROR_WEBVIEW_NAME',
      'SELECTED_NODE_CLASS_NAME',
      'SELECTED_NODE_CLASS_SELECTOR',
      'STATE_OVERRIDE',
      'ZERO_WIDTH_SPACE_CHAR',
      '__INTERNAL_REMIRROR_IDENTIFIER_KEY__',
      'mutateTag',
      'omit',
      'pick',
      'camelCase',
      'capitalCase',
      'constantCase',
      'kebabCase',
      'pascalCase',
      'pathCase',
      'snakeCase',
      'spaceCase',
      'debounce',
      'throttle',
      'Cast',
      'RemirrorError',
      'assert',
      'assertGet',
      'callIfDefined',
      'capitalize',
      'clamp',
      'cleanupOS',
      'clone',
      'cx',
      'deepMerge',
      'entries',
      'findMatches',
      'flattenArray',
      'format',
      'freeze',
      'get',
      'getLazyArray',
      'hasOwnProperty',
      'includes',
      'invariant',
      'isAndroidOS',
      'isArray',
      'isBoolean',
      'isClass',
      'isDate',
      'isDirectInstanceOf',
      'isEmptyArray',
      'isEmptyObject',
      'isEqual',
      'isError',
      'isFunction',
      'isInstanceOf',
      'isInteger',
      'isMap',
      'isNativePromise',
      'isNonEmptyArray',
      'isNull',
      'isNullOrUndefined',
      'isNumber',
      'isObject',
      'isPlainObject',
      'isPrimitive',
      'isPromise',
      'isRegExp',
      'isSafeInteger',
      'isSet',
      'isString',
      'isSymbol',
      'isUndefined',
      'keys',
      'last',
      'noop',
      'object',
      'omitUndefined',
      'randomFloat',
      'randomInt',
      'range',
      'set',
      'shallowClone',
      'sort',
      'startCase',
      'take',
      'toString',
      'uniqueArray',
      'uniqueBy',
      'uniqueId',
      'unset',
      'values',
      'within',
      'chainCommands',
      'chainableEditorState',
      'convertCommand',
      'nonChainable',
      'DOM_SIZE_UNITS',
      'applyClonedTransaction',
      'areSchemasCompatible',
      'areStatesEqual',
      'atDocEnd',
      'atDocStart',
      'canInsertNode',
      'chainKeyBindingCommands',
      'cloneTransaction',
      'containsNodesOfType',
      'convertPixelsToDomUnit',
      'createDocumentNode',
      'endPositionOfParent',
      'environment',
      'extractPixelSize',
      'findBlockNodes',
      'findChildren',
      'findChildrenByAttribute',
      'findChildrenByMark',
      'findChildrenByNode',
      'findElementAtPosition',
      'findInlineNodes',
      'findNodeAtPosition',
      'findNodeAtSelection',
      'findParentNode',
      'findParentNodeOfType',
      'findPositionOfNodeAfter',
      'findPositionOfNodeBefore',
      'findSelectedNodeOfType',
      'findTextNodes',
      'getActiveNode',
      'getChangedNodeRanges',
      'getChangedNodes',
      'getChangedRanges',
      'getCursor',
      'getDefaultBlockNode',
      'getDefaultDocNode',
      'getDocRange',
      'getDocument',
      'getFontSize',
      'getInvalidContent',
      'getMarkAttributes',
      'getMarkRange',
      'getMarkRanges',
      'getMarkType',
      'getMatchString',
      'getNodeType',
      'getRemirrorJSON',
      'getSelectedGroup',
      'getSelectedWord',
      'getShortcutSymbols',
      'getStyle',
      'getTextContentFromSlice',
      'getTextSelection',
      'hasTransactionChanged',
      'htmlToProsemirrorNode',
      'isAllSelection',
      'isChrome',
      'isDefaultBlockNode',
      'isDefaultDocNode',
      'isDocNode',
      'isDocNodeEmpty',
      'isDomNode',
      'isEditorSchema',
      'isEditorState',
      'isElementDomNode',
      'isEmptyBlockNode',
      'isEndOfTextBlock',
      'isIdentifierOfType',
      'isMarkActive',
      'isMarkType',
      'isNodeActive',
      'isNodeOfType',
      'isNodeSelection',
      'isNodeType',
      'isProsemirrorFragment',
      'isProsemirrorMark',
      'isProsemirrorNode',
      'isRemirrorJSON',
      'isRemirrorType',
      'isResolvedPos',
      'isSelection',
      'isSelectionEmpty',
      'isStartOfDoc',
      'isStartOfTextBlock',
      'isTextDomNode',
      'isTextSelection',
      'isTransaction',
      'joinStyles',
      'lift',
      'markEqualsType',
      'markInputRule',
      'mergeKeyBindings',
      'mergeProsemirrorKeyBindings',
      'nodeInputRule',
      'omitExtraAttributes',
      'parseSizeUnit',
      'plainInputRule',
      'preserveSelection',
      'prosemirrorNodeToDom',
      'prosemirrorNodeToHtml',
      'removeMark',
      'removeNodeAfter',
      'removeNodeAtPosition',
      'removeNodeBefore',
      'replaceNodeAtPosition',
      'replaceText',
      'schemaToJSON',
      'setBlockType',
      'shouldUseDomEnvironment',
      'startPositionOfParent',
      'textBetween',
      'toggleBlockItem',
      'toggleWrap',
      'updateMark',
      'wrapIn',
    ],
  },
  {
    moduleName: '@remirror/core-constants',
    exports: [
      'RemirrorIdentifier',
      'ExtensionPriority',
      'ManagerPhase',
      'NamedShortcut',
      'ErrorConstant',
      'EMPTY_ARRAY',
      'EMPTY_NODE',
      'EMPTY_PARAGRAPH_NODE',
      'ExtensionTag',
      'LEAF_NODE_REPLACING_CHARACTER',
      'NON_BREAKING_SPACE_CHAR',
      'NULL_CHARACTER',
      'REMIRROR_WEBVIEW_NAME',
      'SELECTED_NODE_CLASS_NAME',
      'SELECTED_NODE_CLASS_SELECTOR',
      'STATE_OVERRIDE',
      'ZERO_WIDTH_SPACE_CHAR',
      '__INTERNAL_REMIRROR_IDENTIFIER_KEY__',
      'mutateTag',
    ],
  },
  {
    moduleName: '@remirror/core-helpers',
    exports: [
      'omit',
      'pick',
      'camelCase',
      'capitalCase',
      'constantCase',
      'kebabCase',
      'pascalCase',
      'pathCase',
      'snakeCase',
      'spaceCase',
      'debounce',
      'throttle',
      'Cast',
      'RemirrorError',
      'assert',
      'assertGet',
      'callIfDefined',
      'capitalize',
      'clamp',
      'cleanupOS',
      'clone',
      'cx',
      'deepMerge',
      'entries',
      'findMatches',
      'flattenArray',
      'format',
      'freeze',
      'get',
      'getLazyArray',
      'hasOwnProperty',
      'includes',
      'invariant',
      'isAndroidOS',
      'isArray',
      'isBoolean',
      'isClass',
      'isDate',
      'isDirectInstanceOf',
      'isEmptyArray',
      'isEmptyObject',
      'isEqual',
      'isError',
      'isFunction',
      'isInstanceOf',
      'isInteger',
      'isMap',
      'isNativePromise',
      'isNonEmptyArray',
      'isNull',
      'isNullOrUndefined',
      'isNumber',
      'isObject',
      'isPlainObject',
      'isPrimitive',
      'isPromise',
      'isRegExp',
      'isSafeInteger',
      'isSet',
      'isString',
      'isSymbol',
      'isUndefined',
      'keys',
      'last',
      'noop',
      'object',
      'omitUndefined',
      'randomFloat',
      'randomInt',
      'range',
      'set',
      'shallowClone',
      'sort',
      'startCase',
      'take',
      'toString',
      'uniqueArray',
      'uniqueBy',
      'uniqueId',
      'unset',
      'values',
      'within',
    ],
  },
  {
    moduleName: '@remirror/core-types',
    exports: [],
  },
  {
    moduleName: '@remirror/core-utils',
    exports: [
      'chainCommands',
      'chainableEditorState',
      'convertCommand',
      'nonChainable',
      'DOM_SIZE_UNITS',
      'applyClonedTransaction',
      'areSchemasCompatible',
      'areStatesEqual',
      'atDocEnd',
      'atDocStart',
      'canInsertNode',
      'chainKeyBindingCommands',
      'cloneTransaction',
      'containsNodesOfType',
      'convertPixelsToDomUnit',
      'createDocumentNode',
      'endPositionOfParent',
      'environment',
      'extractPixelSize',
      'findBlockNodes',
      'findChildren',
      'findChildrenByAttribute',
      'findChildrenByMark',
      'findChildrenByNode',
      'findElementAtPosition',
      'findInlineNodes',
      'findNodeAtPosition',
      'findNodeAtSelection',
      'findParentNode',
      'findParentNodeOfType',
      'findPositionOfNodeAfter',
      'findPositionOfNodeBefore',
      'findSelectedNodeOfType',
      'findTextNodes',
      'getActiveNode',
      'getChangedNodeRanges',
      'getChangedNodes',
      'getChangedRanges',
      'getCursor',
      'getDefaultBlockNode',
      'getDefaultDocNode',
      'getDocRange',
      'getDocument',
      'getFontSize',
      'getInvalidContent',
      'getMarkAttributes',
      'getMarkRange',
      'getMarkRanges',
      'getMarkType',
      'getMatchString',
      'getNodeType',
      'getRemirrorJSON',
      'getSelectedGroup',
      'getSelectedWord',
      'getShortcutSymbols',
      'getStyle',
      'getTextContentFromSlice',
      'getTextSelection',
      'hasTransactionChanged',
      'htmlToProsemirrorNode',
      'isAllSelection',
      'isChrome',
      'isDefaultBlockNode',
      'isDefaultDocNode',
      'isDocNode',
      'isDocNodeEmpty',
      'isDomNode',
      'isEditorSchema',
      'isEditorState',
      'isElementDomNode',
      'isEmptyBlockNode',
      'isEndOfTextBlock',
      'isIdentifierOfType',
      'isMarkActive',
      'isMarkType',
      'isNodeActive',
      'isNodeOfType',
      'isNodeSelection',
      'isNodeType',
      'isProsemirrorFragment',
      'isProsemirrorMark',
      'isProsemirrorNode',
      'isRemirrorJSON',
      'isRemirrorType',
      'isResolvedPos',
      'isSelection',
      'isSelectionEmpty',
      'isStartOfDoc',
      'isStartOfTextBlock',
      'isTextDomNode',
      'isTextSelection',
      'isTransaction',
      'joinStyles',
      'lift',
      'markEqualsType',
      'markInputRule',
      'mergeKeyBindings',
      'mergeProsemirrorKeyBindings',
      'nodeInputRule',
      'omitExtraAttributes',
      'parseSizeUnit',
      'plainInputRule',
      'preserveSelection',
      'prosemirrorNodeToDom',
      'prosemirrorNodeToHtml',
      'removeMark',
      'removeNodeAfter',
      'removeNodeAtPosition',
      'removeNodeBefore',
      'replaceNodeAtPosition',
      'replaceText',
      'schemaToJSON',
      'setBlockType',
      'shouldUseDomEnvironment',
      'startPositionOfParent',
      'textBetween',
      'toggleBlockItem',
      'toggleWrap',
      'updateMark',
      'wrapIn',
    ],
  },
  {
    moduleName: '@remirror/types',
    exports: [],
  },
  {
    moduleName: '@remirror/extension-annotation',
    exports: ['AnnotationExtension', 'createCenteredAnnotationPositioner'],
  },
  {
    moduleName: '@remirror/extension-bidi',
    exports: ['BidiExtension'],
  },
  {
    moduleName: '@remirror/extension-blockquote',
    exports: ['BlockquoteExtension'],
  },
  {
    moduleName: '@remirror/extension-bold',
    exports: ['BoldExtension'],
  },
  {
    moduleName: '@remirror/extension-callout',
    exports: ['CalloutExtension'],
  },
  {
    moduleName: '@remirror/extension-code',
    exports: ['CodeExtension'],
  },
  {
    moduleName: '@remirror/extension-code-block',
    exports: ['CodeBlockExtension', 'getLanguage'],
  },
  {
    moduleName: '@remirror/extension-codemirror5',
    exports: ['CodeMirrorExtension'],
  },
  {
    moduleName: '@remirror/extension-collaboration',
    exports: ['CollaborationExtension'],
  },
  {
    moduleName: '@remirror/extension-columns',
    exports: ['ColumnsExtension', 'DEFAULT_COLUMN_ATTRIBUTES', 'toggleColumnsOptions'],
  },
  {
    moduleName: '@remirror/extension-diff',
    exports: ['DiffExtension'],
  },
  {
    moduleName: '@remirror/extension-doc',
    exports: ['DocExtension'],
  },
  {
    moduleName: '@remirror/extension-drop-cursor',
    exports: ['DropCursorExtension'],
  },
  {
    moduleName: '@remirror/extension-embed',
    exports: ['IframeExtension'],
  },
  {
    moduleName: '@remirror/extension-emoji',
    exports: ['EmojiExtension'],
  },
  {
    moduleName: '@remirror/extension-epic-mode',
    exports: ['COLORS', 'EpicModeExtension', 'defaultEffect', 'heartEffect', 'spawningEffect'],
  },
  {
    moduleName: '@remirror/extension-events',
    exports: ['EventsExtension'],
  },
  {
    moduleName: '@remirror/extension-font-family',
    exports: ['FontFamilyExtension'],
  },
  {
    moduleName: '@remirror/extension-font-size',
    exports: ['FontSizeExtension'],
  },
  {
    moduleName: '@remirror/extension-gap-cursor',
    exports: ['GapCursorExtension', 'isGapCursorSelection'],
  },
  {
    moduleName: '@remirror/extension-hard-break',
    exports: ['HardBreakExtension'],
  },
  {
    moduleName: '@remirror/extension-heading',
    exports: ['HeadingExtension'],
  },
  {
    moduleName: '@remirror/extension-history',
    exports: ['HistoryExtension'],
  },
  {
    moduleName: '@remirror/extension-horizontal-rule',
    exports: ['HorizontalRuleExtension'],
  },
  {
    moduleName: '@remirror/extension-image',
    exports: ['ImageExtension', 'ResizableImageView', 'isImageFileType'],
  },
  {
    moduleName: '@remirror/extension-italic',
    exports: ['ItalicExtension'],
  },
  {
    moduleName: '@remirror/extension-link',
    exports: ['LinkExtension'],
  },
  {
    moduleName: '@remirror/extension-list',
    exports: [
      'BulletListExtension',
      'ListItemExtension',
      'ListItemSharedExtension',
      'OrderedListExtension',
      'TaskListExtension',
      'TaskListItemExtension',
      'sharedLiftListItem',
      'sharedSinkListItem',
      'toggleList',
    ],
  },
  {
    moduleName: '@remirror/extension-markdown',
    exports: ['MarkdownExtension'],
  },
  {
    moduleName: '@remirror/extension-mention',
    exports: ['MentionExtension'],
  },
  {
    moduleName: '@remirror/extension-mention-atom',
    exports: ['MentionAtomExtension'],
  },
  {
    moduleName: '@remirror/extension-node-formatting',
    exports: ['NodeFormattingExtension'],
  },
  {
    moduleName: '@remirror/extension-paragraph',
    exports: ['ParagraphExtension'],
  },
  {
    moduleName: '@remirror/extension-placeholder',
    exports: ['PlaceholderExtension'],
  },
  {
    moduleName: '@remirror/extension-positioner',
    exports: [
      'isEmptyBlockNode',
      'POSITIONER_WIDGET_KEY',
      'Positioner',
      'PositionerExtension',
      'alwaysPositioner',
      'blockNodePositioner',
      'createMarkPositioner',
      'cursorPositioner',
      'defaultAbsolutePosition',
      'emptyBlockNodeEndPositioner',
      'emptyBlockNodePositioner',
      'emptyBlockNodeStartPositioner',
      'getPositioner',
      'hasStateChanged',
      'isPositionVisible',
      'nearestWordPositioner',
      'positioners',
      'selectionPositioner',
    ],
  },
  {
    moduleName: '@remirror/extension-react-component',
    exports: ['PortalContainer', 'ReactComponentExtension', 'RemirrorPortals', 'usePortals'],
  },
  {
    moduleName: '@remirror/extension-react-ssr',
    exports: ['ReactSsrExtension'],
  },
  {
    moduleName: '@remirror/extension-react-tables',
    exports: [
      'TableCellExtension',
      'TableCellMenu',
      'TableComponents',
      'TableControllerCellExtension',
      'TableDeleteRowColumnButton',
      'TableDeleteRowColumnInnerButton',
      'TableExtension',
      'TableHeaderCellExtension',
      'TableRowExtension',
      'tableControllerPluginKey',
    ],
  },
  {
    moduleName: '@remirror/extension-search',
    exports: ['SearchExtension', 'rotateHighlightedIndex'],
  },
  {
    moduleName: '@remirror/extension-strike',
    exports: ['StrikeExtension'],
  },
  {
    moduleName: '@remirror/extension-sub',
    exports: ['SubExtension'],
  },
  {
    moduleName: '@remirror/extension-sup',
    exports: ['SupExtension'],
  },
  {
    moduleName: '@remirror/extension-tables',
    exports: [
      'TableCellExtension',
      'TableExtension',
      'TableHeaderCellExtension',
      'TableRowExtension',
      'createTable',
      'createTableOptions',
    ],
  },
  {
    moduleName: '@remirror/extension-text',
    exports: ['TextExtension'],
  },
  {
    moduleName: '@remirror/extension-text-case',
    exports: ['TextCaseExtension'],
  },
  {
    moduleName: '@remirror/extension-text-color',
    exports: [
      'CSS_VAR_REGEX',
      'TEXT_COLOR_ATTRIBUTE',
      'TextColorExtension',
      'palette',
      'setTextColorOptions',
    ],
  },
  {
    moduleName: '@remirror/extension-text-highlight',
    exports: ['TextHighlightExtension'],
  },
  {
    moduleName: '@remirror/extension-trailing-node',
    exports: ['TrailingNodeExtension'],
  },
  {
    moduleName: '@remirror/extension-underline',
    exports: ['UnderlineExtension'],
  },
  {
    moduleName: '@remirror/extension-whitespace',
    exports: ['WhitespaceExtension'],
  },
  {
    moduleName: '@remirror/extension-yjs',
    exports: ['YjsExtension', 'defaultDestroyProvider'],
  },
  {
    moduleName: '@remirror/preset-core',
    exports: ['corePreset', 'createCoreManager'],
  },
  {
    moduleName: '@remirror/preset-formatting',
    exports: ['formattingPreset'],
  },
  {
    moduleName: '@remirror/preset-react',
    exports: ['ReactExtension', 'ReactPlaceholderExtension'],
  },
  {
    moduleName: '@remirror/preset-wysiwyg',
    exports: ['wysiwygPreset'],
  },
  {
    moduleName: '@remirror/react',
    exports: [
      'PortalContainer',
      'ReactComponentExtension',
      'RemirrorPortals',
      'usePortals',
      'ReactSsrExtension',
      'TableCellExtension',
      'TableCellMenu',
      'TableComponents',
      'TableControllerCellExtension',
      'TableDeleteRowColumnButton',
      'TableDeleteRowColumnInnerButton',
      'TableExtension',
      'TableHeaderCellExtension',
      'TableRowExtension',
      'tableControllerPluginKey',
      'ReactExtension',
      'ReactPlaceholderExtension',
      'ComponentItem',
      'GenIcon',
      'Icon',
      'IconBase',
      'Button',
      'ColorPickerComponent',
      'CommandIconComponent',
      'ControlledDialogComponent',
      'DropdownComponent',
      'EmojiPopupComponent',
      'FloatingActionsMenu',
      'FloatingToolbar',
      'FloatingWrapper',
      'MentionAtomPopupComponent',
      'MenuBar',
      'MenuComponent',
      'PositionerPortal',
      'TableSizeEditorComponent',
      'ThemeProvider',
      'Toolbar',
      'useTheme',
      'EditorComponent',
      'I18nProvider',
      'Remirror',
      'RemirrorContext',
      'createReactManager',
      'useActive',
      'useAttrs',
      'useChainedCommands',
      'useCommands',
      'useCurrentSelection',
      'useEditorDomRef',
      'useEditorState',
      'useEditorView',
      'useEffectWithWarning',
      'useExtension',
      'useForceUpdate',
      'useHelpers',
      'useI18n',
      'useManager',
      'useMarkRange',
      'usePortalContainer',
      'useRemirror',
      'useRemirrorContext',
      'useSelectedText',
      'useUpdateReason',
      'indexFromArrowPress',
      'useMenuNavigation',
      'useEditorFocus',
      'useEmoji',
      'useEvent',
      'useEvents',
      'useHistory',
      'useHover',
      'useKeymap',
      'useKeymaps',
      'useMention',
      'useMentionAtom',
      'useMultiPositioner',
      'usePositioner',
      'useSuggest',
      'useSuggester',
      'Callout',
      'CodeBlock',
      'Doc',
      'Heading',
      'RemirrorRenderer',
      'TextHandler',
      'createIFrameHandler',
      'createLinkHandler',
      'EditorViewSSR',
      'ReactSerializer',
      'RemirrorSSR',
      'createEditorView',
      'addKeyToElement',
      'getElementProps',
      'isReactDOMElement',
      'isReactFragment',
      'isValidElement',
      'propIsFunction',
    ],
  },
  {
    moduleName: '@remirror/react-components',
    exports: [
      'ComponentItem',
      'GenIcon',
      'Icon',
      'IconBase',
      'Button',
      'ColorPickerComponent',
      'CommandIconComponent',
      'ControlledDialogComponent',
      'DropdownComponent',
      'EmojiPopupComponent',
      'FloatingActionsMenu',
      'FloatingToolbar',
      'FloatingWrapper',
      'MentionAtomPopupComponent',
      'MenuBar',
      'MenuComponent',
      'PositionerPortal',
      'TableSizeEditorComponent',
      'ThemeProvider',
      'Toolbar',
      'useTheme',
    ],
  },
  {
    moduleName: '@remirror/react-core',
    exports: [
      'EditorComponent',
      'I18nProvider',
      'Remirror',
      'RemirrorContext',
      'createReactManager',
      'useActive',
      'useAttrs',
      'useChainedCommands',
      'useCommands',
      'useCurrentSelection',
      'useEditorDomRef',
      'useEditorState',
      'useEditorView',
      'useEffectWithWarning',
      'useExtension',
      'useForceUpdate',
      'useHelpers',
      'useI18n',
      'useManager',
      'useMarkRange',
      'usePortalContainer',
      'useRemirror',
      'useRemirrorContext',
      'useSelectedText',
      'useUpdateReason',
    ],
  },
  {
    moduleName: '@remirror/react-debugger',
    exports: ['DebuggerTools'],
  },
  {
    moduleName: '@remirror/react-editors',
    exports: [],
  },
  {
    moduleName: '@remirror/react-hooks',
    exports: [
      'indexFromArrowPress',
      'useMenuNavigation',
      'useEditorFocus',
      'useEmoji',
      'useEvent',
      'useEvents',
      'useHistory',
      'useHover',
      'useKeymap',
      'useKeymaps',
      'useMention',
      'useMentionAtom',
      'useMultiPositioner',
      'usePositioner',
      'useSuggest',
      'useSuggester',
    ],
  },
  {
    moduleName: '@remirror/react-renderer',
    exports: [
      'Callout',
      'CodeBlock',
      'Doc',
      'Heading',
      'RemirrorRenderer',
      'TextHandler',
      'createIFrameHandler',
      'createLinkHandler',
    ],
  },
  {
    moduleName: '@remirror/react-ssr',
    exports: ['EditorViewSSR', 'ReactSerializer', 'RemirrorSSR', 'createEditorView'],
  },
  {
    moduleName: '@remirror/react-utils',
    exports: [
      'addKeyToElement',
      'getElementProps',
      'isReactDOMElement',
      'isReactFragment',
      'isValidElement',
      'propIsFunction',
    ],
  },
  {
    moduleName: 'create-context-state',
    exports: ['createContextHook', 'createContextState'],
  },
  {
    moduleName: 'multishift',
    exports: [
      'Actions',
      'MultishiftActionTypes',
      'SPECIAL_INPUT_KEYS',
      'SPECIAL_KEYS',
      'SPECIAL_MENU_KEYS',
      'SPECIAL_TOGGLE_BUTTON_KEYS',
      'Type',
      'useMultishift',
    ],
  },
  {
    moduleName: 'prosemirror-paste-rules',
    exports: ['isInCode', 'pasteRules'],
  },
  {
    moduleName: 'prosemirror-resizable-view',
    exports: ['ResizableNodeView'],
  },
  {
    moduleName: 'prosemirror-suggest',
    exports: [
      'ExitReason',
      'ChangeReason',
      'DEFAULT_SUGGESTER',
      'IGNORE_SUGGEST_META_KEY',
      'addSuggester',
      'createRegexFromSuggester',
      'findFromSuggesters',
      'getSuggestPluginState',
      'getSuggesterWithDefaults',
      'ignoreUpdateForSuggest',
      'isChangeReason',
      'isExitReason',
      'isInvalidSplitReason',
      'isJumpReason',
      'isRemovedReason',
      'isSelectionChangeReason',
      'isSelectionExitReason',
      'isSplitReason',
      'isValidMatch',
      'markActiveInRange',
      'positionHasMarks',
      'rangeHasMarks',
      'removeSuggester',
      'selectionOutsideMatch',
      'suggest',
    ],
  },
  {
    moduleName: 'prosemirror-trailing-node',
    exports: ['trailingNode'],
  },
  {
    moduleName: 'remirror',
    exports: [
      'VERSION',
      'AttributesExtension',
      'CommandsExtension',
      'DEFAULT_SHORTCUTS',
      'DecorationsExtension',
      'DelayedCommand',
      'Framework',
      'GOOGLE_DOC_SHORTCUTS',
      'HelpersExtension',
      'InputRulesExtension',
      'KeymapExtension',
      'MarkExtension',
      'MetaExtension',
      'NodeExtension',
      'NodeViewsExtension',
      'PasteRulesExtension',
      'PlainExtension',
      'PluginsExtension',
      'RemirrorManager',
      'SchemaExtension',
      'SuggestExtension',
      'TagsExtension',
      'builtinPreset',
      'command',
      'delayedCommand',
      'extension',
      'extensionDecorator',
      'helper',
      'insertText',
      'isDelayedValue',
      'isExtension',
      'isExtensionConstructor',
      'isExtensionTag',
      'isMarkExtension',
      'isNodeExtension',
      'isPlainExtension',
      'isRemirrorManager',
      'keyBinding',
      'keyboardShortcuts',
      'mutateDefaultExtensionOptions',
      'toggleMark',
      'RemirrorIdentifier',
      'ExtensionPriority',
      'ManagerPhase',
      'NamedShortcut',
      'ErrorConstant',
      'EMPTY_ARRAY',
      'EMPTY_NODE',
      'EMPTY_PARAGRAPH_NODE',
      'ExtensionTag',
      'LEAF_NODE_REPLACING_CHARACTER',
      'NON_BREAKING_SPACE_CHAR',
      'NULL_CHARACTER',
      'REMIRROR_WEBVIEW_NAME',
      'SELECTED_NODE_CLASS_NAME',
      'SELECTED_NODE_CLASS_SELECTOR',
      'STATE_OVERRIDE',
      'ZERO_WIDTH_SPACE_CHAR',
      '__INTERNAL_REMIRROR_IDENTIFIER_KEY__',
      'mutateTag',
      'omit',
      'pick',
      'camelCase',
      'capitalCase',
      'constantCase',
      'kebabCase',
      'pascalCase',
      'pathCase',
      'snakeCase',
      'spaceCase',
      'debounce',
      'throttle',
      'Cast',
      'RemirrorError',
      'assert',
      'assertGet',
      'callIfDefined',
      'capitalize',
      'clamp',
      'cleanupOS',
      'clone',
      'cx',
      'deepMerge',
      'entries',
      'findMatches',
      'flattenArray',
      'format',
      'freeze',
      'get',
      'getLazyArray',
      'hasOwnProperty',
      'includes',
      'invariant',
      'isAndroidOS',
      'isArray',
      'isBoolean',
      'isClass',
      'isDate',
      'isDirectInstanceOf',
      'isEmptyArray',
      'isEmptyObject',
      'isEqual',
      'isError',
      'isFunction',
      'isInstanceOf',
      'isInteger',
      'isMap',
      'isNativePromise',
      'isNonEmptyArray',
      'isNull',
      'isNullOrUndefined',
      'isNumber',
      'isObject',
      'isPlainObject',
      'isPrimitive',
      'isPromise',
      'isRegExp',
      'isSafeInteger',
      'isSet',
      'isString',
      'isSymbol',
      'isUndefined',
      'keys',
      'last',
      'noop',
      'object',
      'omitUndefined',
      'randomFloat',
      'randomInt',
      'range',
      'set',
      'shallowClone',
      'sort',
      'startCase',
      'take',
      'toString',
      'uniqueArray',
      'uniqueBy',
      'uniqueId',
      'unset',
      'values',
      'within',
      'chainCommands',
      'chainableEditorState',
      'convertCommand',
      'nonChainable',
      'DOM_SIZE_UNITS',
      'applyClonedTransaction',
      'areSchemasCompatible',
      'areStatesEqual',
      'atDocEnd',
      'atDocStart',
      'canInsertNode',
      'chainKeyBindingCommands',
      'cloneTransaction',
      'containsNodesOfType',
      'convertPixelsToDomUnit',
      'createDocumentNode',
      'endPositionOfParent',
      'environment',
      'extractPixelSize',
      'findBlockNodes',
      'findChildren',
      'findChildrenByAttribute',
      'findChildrenByMark',
      'findChildrenByNode',
      'findElementAtPosition',
      'findInlineNodes',
      'findNodeAtPosition',
      'findNodeAtSelection',
      'findParentNode',
      'findParentNodeOfType',
      'findPositionOfNodeAfter',
      'findPositionOfNodeBefore',
      'findSelectedNodeOfType',
      'findTextNodes',
      'getActiveNode',
      'getChangedNodeRanges',
      'getChangedNodes',
      'getChangedRanges',
      'getCursor',
      'getDefaultBlockNode',
      'getDefaultDocNode',
      'getDocRange',
      'getDocument',
      'getFontSize',
      'getInvalidContent',
      'getMarkAttributes',
      'getMarkRange',
      'getMarkRanges',
      'getMarkType',
      'getMatchString',
      'getNodeType',
      'getRemirrorJSON',
      'getSelectedGroup',
      'getSelectedWord',
      'getShortcutSymbols',
      'getStyle',
      'getTextContentFromSlice',
      'getTextSelection',
      'hasTransactionChanged',
      'htmlToProsemirrorNode',
      'isAllSelection',
      'isChrome',
      'isDefaultBlockNode',
      'isDefaultDocNode',
      'isDocNode',
      'isDocNodeEmpty',
      'isDomNode',
      'isEditorSchema',
      'isEditorState',
      'isElementDomNode',
      'isEmptyBlockNode',
      'isEndOfTextBlock',
      'isIdentifierOfType',
      'isMarkActive',
      'isMarkType',
      'isNodeActive',
      'isNodeOfType',
      'isNodeSelection',
      'isNodeType',
      'isProsemirrorFragment',
      'isProsemirrorMark',
      'isProsemirrorNode',
      'isRemirrorJSON',
      'isRemirrorType',
      'isResolvedPos',
      'isSelection',
      'isSelectionEmpty',
      'isStartOfDoc',
      'isStartOfTextBlock',
      'isTextDomNode',
      'isTextSelection',
      'isTransaction',
      'joinStyles',
      'lift',
      'markEqualsType',
      'markInputRule',
      'mergeKeyBindings',
      'mergeProsemirrorKeyBindings',
      'nodeInputRule',
      'omitExtraAttributes',
      'parseSizeUnit',
      'plainInputRule',
      'preserveSelection',
      'prosemirrorNodeToDom',
      'prosemirrorNodeToHtml',
      'removeMark',
      'removeNodeAfter',
      'removeNodeAtPosition',
      'removeNodeBefore',
      'replaceNodeAtPosition',
      'replaceText',
      'schemaToJSON',
      'setBlockType',
      'shouldUseDomEnvironment',
      'startPositionOfParent',
      'textBetween',
      'toggleBlockItem',
      'toggleWrap',
      'updateMark',
      'wrapIn',
      'ComponentsTheme',
      'CoreTheme',
      'ExtensionBlockquoteTheme',
      'ExtensionCalloutTheme',
      'ExtensionCodeBlockTheme',
      'ExtensionEmojiTheme',
      'ExtensionGapCursorTheme',
      'ExtensionImageTheme',
      'ExtensionListTheme',
      'ExtensionMentionAtomTheme',
      'ExtensionPlaceholderTheme',
      'ExtensionPositionerTheme',
      'ExtensionTablesTheme',
      'ExtensionWhitespaceTheme',
      'ReactEditorsTheme',
      'THEME',
      'createThemeVariables',
      'defaultRemirrorTheme',
      'getTheme',
      'getThemeProps',
    ],
  },
];

/**
 * The names of external modules.
 */
export const EXTERNAL_MODULE_META: string[] = [
  '@remirror/pm',
  '@remirror/dev',
  'remirror/extensions',
  'remirror/dom',
  'react',
  'react/jsx-runtime',
  'react/jsx-dev-runtime',
  'react-dom',
  'prosemirror-dropcursor',
  'prosemirror-gapcursor',
  'prosemirror-history',
  'prosemirror-inputrules',
  'prosemirror-keymap',
  'prosemirror-model',
  'prosemirror-schema-list',
  'prosemirror-state',
  'prosemirror-tables',
  'prosemirror-transform',
  'prosemirror-view',
  '@remirror/pm/dropcursor',
  '@remirror/pm/gapcursor',
  '@remirror/pm/history',
  '@remirror/pm/inputrules',
  '@remirror/pm/keymap',
  '@remirror/pm/model',
  '@remirror/pm/schema-list',
  '@remirror/pm/state',
  '@remirror/pm/tables',
  '@remirror/pm/transform',
  '@remirror/pm/view',
  '@remirror/pm/suggest',
  '@remirror/pm/paste-rules',
  '@remirror/pm/trailing-node',
];
